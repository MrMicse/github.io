
// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const bankEl = document.getElementById("bank");
const betInput = document.getElementById("bet");
const levelEl = document.getElementById("level");
const multiplierEl = document.getElementById("multiplier");
const gameButtons = document.querySelectorAll(".game-btn");
const resultEl = document.querySelector(".result");

// –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
const coinAnimationContainer = document.createElement('div');
coinAnimationContainer.className = 'coin-animation-container';
document.body.appendChild(coinAnimationContainer);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–Ω–∫–æ–º
// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadBank() {
    const savedBank = localStorage.getItem('gameBank');
    const value = parseInt(savedBank);
    return isNaN(value) ? 1000 : value;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–∏–Ω–æ–≤
function saveBank() {
    localStorage.setItem('gameBank', bank.toString());
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
function updateBank(newValue) {
    bank = Math.max(0, newValue); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ 0
    bankEl.textContent = bank;
    saveBank();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let bank = loadBank(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–∏–Ω—ã
bankEl.textContent = bank; // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
let currentLevel = 1;
const multipliers = [1.2, 1.5, 1.8, 2.0, 2.5, 3.0, 4.0, 5.0, 7.0, 10.0]; // 10 —É—Ä–æ–≤–Ω–µ–π
const MAX_LEVEL = multipliers.length;
const SUPER_GAME_MULTIPLIER = 15;
// –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞
let activeBet = 0;

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
bankEl.textContent = bank;
levelEl.textContent = currentLevel;
multiplierEl.textContent = `x${multipliers[currentLevel - 1]}`;
betInput.focus();

// –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
betInput.focus();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
betInput.addEventListener("input", function() {
    const bet = parseInt(this.value);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç–∞–≤–∫—É
    activeBet = 0;
    gameButtons.forEach(btn => btn.disabled = true);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–∫–∏
    if (isNaN(bet) || bet <= 0) {
        resultEl.textContent = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É";
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    if (bank === 0) {
        resultEl.textContent = "üò¢ –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–∏–Ω–æ–≤!";
        return;
    }
    
    if (bet > bank) {
        showNoCoinsAnimation();
        return;
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    gameButtons.forEach(btn => btn.disabled = false);
    activeBet = bet;
    resultEl.textContent = `–°—Ç–∞–≤–∫–∞: ${bet} –∫–æ–∏–Ω–æ–≤`;
});

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –∫–æ–∏–Ω–æ–≤
function showNoCoinsAnimation() {
    Sound.play('error');
    resultEl.textContent = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤!";
    resultEl.classList.add('shake-animation');
    
    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç "—Ä–∞—Å—Å—ã–ø–∞—é—â–∏—Ö—Å—è –º–æ–Ω–µ—Ç"
    for (let i = 0; i < 8; i++) {
        const coin = document.createElement('div');
        coin.className = 'no-coins-coin';
        coin.style.left = `${Math.random() * 100}%`;
        coin.style.top = '0';
        coin.style.setProperty('--fall-distance', `${100 + Math.random() * 50}px`);
        coin.style.setProperty('--fall-delay', `${i * 0.1}s`);
        resultEl.appendChild(coin);
        
        setTimeout(() => coin.remove(), 2000);
    }
    
    setTimeout(() => {
        resultEl.classList.remove('shake-animation');
    }, 500);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–≥—Ä–æ–≤—ã–º –∫–Ω–æ–ø–∫–∞–º
gameButtons.forEach(btn => {
    btn.addEventListener("click", function() {
        // –ó–≤—É–∫
        Sound.play('click');
        // –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤
        if (activeBet <= 0 || bank < activeBet) {
            resultEl.textContent = "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤";
            return;
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –∏–≥—Ä—ã
        gameButtons.forEach(btn => btn.disabled = true);
        
        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        updateBank(bank - activeBet);
        
        prepareButtons();
        
        // –ù–∞—á–∏–Ω–∞—è —Å 5 —É—Ä–æ–≤–Ω—è - 2 –º–∏–Ω—ã (33% —à–∞–Ω—Å)
        const minesCount = currentLevel >= 6 ? 2 : 1;
        setMines(minesCount);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ 2 –º–∏–Ω–∞—Ö –ø—Ä–∏ 5+ —É—Ä–æ–≤–Ω–µ
        if (currentLevel === 5) {
            showWarning("–í–Ω–∏–º–∞–Ω–∏–µ! –° 6 —É—Ä–æ–≤–Ω—è 2 –º–∏–Ω—ã (—à–∞–Ω—Å 33%)", 2000);
        }
        
        if (this.dataset.safe === "true") {
            Sound.play('coins');
            const winAmount = Math.floor(activeBet * multipliers[currentLevel - 1]);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
            createCoinAnimation(this, winAmount);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞
            animateValue(bank, bank + winAmount, 1000, (value) => {
                bankEl.textContent = value;
            });
            
            updateBank(bank + winAmount);
            resultEl.innerHTML = `üéâ –í—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} –∫–æ–∏–Ω–æ–≤!`;
            
            currentLevel++;
            levelEl.textContent = currentLevel;
            multiplierEl.textContent = `x${multipliers[currentLevel - 1]}`;
            
            if (currentLevel > MAX_LEVEL) {
                resultEl.innerHTML += "<br>üéä –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏! –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!";
                currentLevel = 1;
            }
        } else {
            createBombAnimation(this);
            Sound.play('explosion');
            resultEl.textContent = "üí£ –ë–û–ú–ë–ê! –°—Ç–∞–≤–∫–∞ —Å–≥–æ—Ä–µ–ª–∞";
            currentLevel = 1;
            levelEl.textContent = currentLevel;
            multiplierEl.textContent = `x${multipliers[currentLevel - 1]}`;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞
        setTimeout(() => {
            prepareButtons();
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–≤–∫–∏
            const currentBet = parseInt(betInput.value);
            if (!isNaN(currentBet)) {
                betInput.dispatchEvent(new Event('input'));
            }
        }, 1000);
    });
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω—ã
function setMines(count) {
    // –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ
    gameButtons.forEach(btn => btn.dataset.safe = "true");
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –º–∏–Ω—ã
    const mineIndexes = [];
    while (mineIndexes.length < count) {
        const randomIndex = Math.floor(Math.random() * gameButtons.length);
        if (!mineIndexes.includes(randomIndex)) {
            mineIndexes.push(randomIndex);
            gameButtons[randomIndex].dataset.safe = "false";
        }
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –±–æ–º–±—ã
function createBombAnimation(element) {
    const bomb = document.createElement('div');
    bomb.className = 'bomb-animation';
    const rect = element.getBoundingClientRect();
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –±–æ–º–±—É –ø–æ —Ü–µ–Ω—Ç—Ä—É –∫–Ω–æ–ø–∫–∏
    bomb.style.cssText = `
        position: fixed;
        left: ${rect.left + rect.width/2 - 25}px;
        top: ${rect.top + rect.height/2 - 25}px;
        width: 50px;
        height: 50px;
        background-image: url('screenshots/bomb.png');
        background-size: contain;
        background-repeat: no-repeat;
        z-index: 1000;
        transform-origin: center;
        animation: bomb-pulse 0.3s infinite alternate;
    `;
    
    document.body.appendChild(bomb);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞
    setTimeout(() => {
        bomb.style.animation = 'none';
        bomb.style.backgroundImage = 'none';
        bomb.style.backgroundColor = 'transparent';
        
        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
        const explosion = document.createElement('div');
        explosion.className = 'explosion-effect';
        explosion.style.cssText = `
            position: fixed;
            left: ${rect.left + rect.width/2 - 50}px;
            top: ${rect.top + rect.height/2 - 50}px;
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(255,100,0,0.8) 0%, rgba(255,50,0,0) 70%);
            z-index: 999;
            transform: scale(0);
            animation: explosion-grow 0.5s forwards;
        `;
        
        document.body.appendChild(explosion);
        
        // –û—Å–∫–æ–ª–∫–∏
        createExplosionDebris(rect.left + rect.width/2, rect.top + rect.height/2);
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            bomb.remove();
            explosion.remove();
        }, 1000);
    }, 800);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–∫–æ–ª–∫–æ–≤ –≤–∑—Ä—ã–≤–∞
function createExplosionDebris(centerX, centerY) {
    for (let i = 0; i < 12; i++) {
        const debris = document.createElement('div');
        debris.className = 'explosion-debris';
        
        const angle = Math.random() * Math.PI * 2;
        const distance = 30 + Math.random() * 50;
        const size = 5 + Math.random() * 10;
        
        debris.style.cssText = `
            position: fixed;
            left: ${centerX}px;
            top: ${centerY}px;
            width: ${size}px;
            height: ${size}px;
            background-color: ${['#ff6600', '#ff3300', '#ff9900', '#cc3300'][Math.floor(Math.random() * 4)]};
            border-radius: ${Math.random() > 0.5 ? '50%' : '0'};
            transform: rotate(${Math.random() * 360}deg);
            animation: debris-fly-${i} 0.8s forwards;
            z-index: 1000;
        `;
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ keyframes –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Å–∫–æ–ª–∫–∞
        const style = document.createElement('style');
        style.textContent = `
            @keyframes debris-fly-${i} {
                to {
                    transform: translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px) rotate(${360 + Math.random() * 360}deg);
                    opacity: 0;
                }
            }
        `;
        
        document.head.appendChild(style);
        document.body.appendChild(debris);
        
        setTimeout(() => {
            debris.remove();
            style.remove();
        }, 800);
    }
}


// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function createCoinAnimation(element, coinsCount) {
    const btnRect = element.getBoundingClientRect();
    const bankRect = bankEl.getBoundingClientRect();
    
    const coinsToCreate = Math.min(15, Math.max(10, Math.floor(coinsCount / 20)));
    
    for (let i = 0; i < coinsToCreate; i++) {
        const coin = document.createElement('div');
        coin.className = 'coin-animation';
        
        const startX = btnRect.left + btnRect.width / 2 - 15;
        const startY = btnRect.top + btnRect.height / 2 - 15;
        const endX = bankRect.left + bankRect.width / 2 - 15;
        const endY = bankRect.top + bankRect.height / 2 - 15;
        const randomX = Math.random() * 100 - 50;
        const randomY = Math.random() * 100 - 50;
        
        coin.style.left = `${startX}px`;
        coin.style.top = `${startY}px`;
        coin.style.setProperty('--random-x', `${endX - startX + randomX}px`);
        coin.style.setProperty('--random-y', `${endY - startY + randomY}px`);
        
        coinAnimationContainer.appendChild(coin);
        
        setTimeout(() => coin.remove(), 1000);
    }
}

function prepareButtons() {
    gameButtons.forEach(btn => {
        btn.dataset.safe = "true";
        btn.classList.remove("mine");
    });
}

function animateValue(start, end, duration, callback) {
    const startTime = performance.now();
    
    function update(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const value = Math.floor(start + (end - start) * progress);
        callback(value);
        
        if (progress < 1) {
            requestAnimationFrame(update);
        }
    }
    
    requestAnimationFrame(update);
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
function showWarning(message, duration) {
    const warning = document.createElement('div');
    warning.className = 'level-warning';
    warning.textContent = message;
    document.body.appendChild(warning);
    
    setTimeout(() => {
        warning.classList.add('fade-out');
        setTimeout(() => warning.remove(), 500);
    }, duration);
}

// –†–µ—Å—Ç–∞—Ä—Ç
document.getElementById('resetBank').addEventListener('click', () => {
    Sound.play('reset');
    updateBank(1000);
    currentLevel = 1;
    levelEl.textContent = currentLevel;
    multiplierEl.textContent = `x${multipliers[currentLevel - 1]}`;
    alert("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω! –ë–∞–Ω–∫: 1000 –∫–æ–∏–Ω–æ–≤");
});


// Audio Manager
const Sound = {
    init: function() {
        this.sounds = {
            click: new Audio('sounds/click.wav'),
            error: new Audio('sounds/error.wav'),
            coins: new Audio('sounds/coins.wav'),
            explosion: new Audio('sounds/explosion.wav'),
            reset: new Audio('sounds/reset.wav')
        };
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        Object.values(this.sounds).forEach(sound => {
            sound.volume = 0.6; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
        });
        this.sounds.explosion.volume = 0.7; // –í–∑—Ä—ã–≤ —á—É—Ç—å –≥—Ä–æ–º—á–µ
    },
    
    play: function(name) {
        if (this.sounds[name]) {
            this.sounds[name].currentTime = 0; // –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            this.sounds[name].play().catch(e => console.log("Auto-play prevented:", e));
        }
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
Sound.init();

let soundEnabled = true;
document.getElementById('soundToggle').addEventListener('click', function() {
    soundEnabled = !soundEnabled;
    this.textContent = soundEnabled ? "üîä" : "üîá";
    Object.values(Sound.sounds).forEach(s => s.muted = !soundEnabled);
});

function createAudioContext() {
    const AudioContext = window.AudioContext || window.webkitAudioContext;
    const ctx = new AudioContext();
    
    return function(name, xPos) {
        if (!soundEnabled) return;
        
        const sound = Sound.sounds[name].cloneNode();
        const panner = new StereoPannerNode(ctx, { pan: xPos * 0.8 });
        
        sound.connect(panner)
            .connect(ctx.destination);
        sound.start();
    };

}

